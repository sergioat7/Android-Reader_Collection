plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'io.gitlab.arturbosch.detekt'
}

def versionMajor = 2
def versionMinor = 5
def versionPatch = 1
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {

    namespace 'aragones.sergio.readercollection'

    signingConfigs {
        release {
            if (project.hasProperty('READER_COLLECTION_STORE_FILE')) {
                storeFile file(READER_COLLECTION_STORE_FILE)
                storePassword READER_COLLECTION_STORE_PASSWORD
                keyAlias READER_COLLECTION_KEY_ALIAS
                keyPassword READER_COLLECTION_KEY_PASSWORD
            }
        }
    }

    defaultConfig {

        applicationId "aragones.sergio.readercollection"
        minSdkVersion 23
        targetSdkVersion 34
        compileSdk 34
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        versionCode versionMajor * 100000 + versionMinor * 1000 + versionPatch * 10 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        resourceConfigurations += ["en", "es"]
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            manifestPlaceholders = [appName: "@string/app_name"]
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '.debug'
            manifestPlaceholders = [appName: "Reader Collection - Pre"]
        }
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    kapt {
        correctErrorTypes = true
    }
}

dependencies {
    
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.constraintlayout
    implementation libs.fragment.ktx
    implementation libs.material
    implementation libs.legacy.support.v4
    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx

    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.ui.ktx
    implementation libs.navigation.dynamic.features.fragment

    implementation libs.moshi
    kapt libs.moshi.kotlin.codegen

    implementation libs.retrofit
    implementation libs.retrofit.adapter.rxjava
    implementation libs.okhttp3.logging.interceptor
    implementation libs.retrofit.converter.moshi

    implementation libs.rxjava
    implementation libs.rxkotlin
    implementation libs.rxandroid

    implementation libs.picasso

    implementation libs.materialratingbar

    implementation libs.room.runtime
    kapt libs.room.compiler
    implementation libs.room.rxjava
    implementation libs.room.rxjava3.bridge

    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics
    implementation libs.firebase.config

    implementation libs.security.crypto

    implementation libs.android.chart

    implementation libs.tap.target.view

    implementation libs.hilt.android
    kapt libs.hilt.android.compiler

    implementation libs.app.update.ktx

    testImplementation libs.junit
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.espresso.core
}